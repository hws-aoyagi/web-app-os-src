package jp.co.headwaters.webappos.controller.model;

import java.util.ArrayList;
import java.util.List;

public class CommonExample {

	protected String orderByClause;
	protected boolean distinct;
	protected List<Criteria> oredCriteria;
	protected List<String> joinTables;

	public CommonExample() {
		this.oredCriteria = new ArrayList<Criteria>();
		this.joinTables = new ArrayList<String>();
	}

	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	public String getOrderByClause() {
		return this.orderByClause;
	}

	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	public boolean isDistinct() {
		return this.distinct;
	}

	public List<Criteria> getOredCriteria() {
		return this.oredCriteria;
	}

	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		this.oredCriteria.add(criteria);
		return criteria;
	}

	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (this.oredCriteria.size() == 0) {
			this.oredCriteria.add(criteria);
		}
		return criteria;
	}

	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	public void clear() {
		this.oredCriteria.clear();
		this.orderByClause = null;
		this.distinct = false;
		this.joinTables.clear();
	}

	public List<String> getJoinTables() {
		return joinTables;
	}

	public void setJoinTables(List<String> joinTables) {
		this.joinTables = joinTables;
	}

	public class Criteria {
		protected List<Criterion> criteria;

		protected Criteria() {
			super();
			this.criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return this.criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return this.criteria;
		}

		public List<Criterion> getCriteria() {
			return this.criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null"); //$NON-NLS-1$
			}
			this.criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value) {
			if (value == null) {
				throw new RuntimeException("Value for " + condition + " cannot be null"); //$NON-NLS-1$ //$NON-NLS-2$
			}
			this.criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + condition + " cannot be null"); //$NON-NLS-1$ //$NON-NLS-2$
			}
			this.criteria.add(new Criterion(condition, value1, value2));
		}

		public Criteria andIsNull(String col) {
			addCriterion(col + " is null"); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andIsNotNull(String col) {
			addCriterion(col + " is not null"); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andEqualTo(String col, Object value) {
			addCriterion(col + " =", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andNotEqualTo(String col, Object value) {
			addCriterion(col + " <>", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andGreaterThan(String col, Object value) {
			addCriterion(col + " >", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andGreaterThanOrEqualTo(String col, Object value) {
			addCriterion(col + " >=", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andLessThan(String col, Object value) {
			addCriterion(col + " <", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andLessThanOrEqualTo(String col, Object value) {
			addCriterion(col + " <=", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andLike(String col, Object value) {
			addCriterion(col + " like", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andNotLike(String col, Object value) {
			addCriterion(col + " not like", value); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andIn(String col, List<Object> values) {
			addCriterion(col + " in", values); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andNotIn(String col, List<Object> values) {
			addCriterion(col + " not in", values); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andBetween(String col, Object value1, Object value2) {
			addCriterion(col + " between", value1, value2); //$NON-NLS-1$
			return (Criteria) this;
		}

		public Criteria andNotBetween(String col, Object value1, Object value2) {
			addCriterion(col + " not between", value1, value2); //$NON-NLS-1$
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table company
	 * @mbggenerated  Fri Sep 06 10:29:58 JST 2013
	 */
	public class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return this.condition;
		}

		public Object getValue() {
			return this.value;
		}

		public Object getSecondValue() {
			return this.secondValue;
		}

		public boolean isNoValue() {
			return this.noValue;
		}

		public boolean isSingleValue() {
			return this.singleValue;
		}

		public boolean isBetweenValue() {
			return this.betweenValue;
		}

		public boolean isListValue() {
			return this.listValue;
		}

		public String getTypeHandler() {
			return this.typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}
}